{"version":3,"file":"simple-ps.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AAC8C;;AAE9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc;AACd,SAAS;AACT,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe,WAAW,EAAE;AACtD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B;AAC1B,kCAAkC;AAClC;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA,8BAA8B,eAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA,mBAAmB;AACnB,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,OAAO;AACX;AACA,WAAW;AACX;AACA;AACA,aAAa;AACb;AACA;AACA,mBAAmB;AACnB;AACA,WAAW;AACX;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,cAAc;AACxC,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ,cAAc,2CAAG,KAAK,WAAW;AAC7D,wBAAwB,QAAQ,aAAa,WAAW;AACxD,wBAAwB,QAAQ,aAAa,WAAW;AACxD;AACA;AACA;AACA,0BAA0B,cAAc;AACxC;AACA;AACA;AACA,aAAa,4CAAI;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA,6BAA6B,eAAe,eAAe;AAC3D,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA,aAAa,cAAc,eAAe;AAC1C,aAAa,4CAAI;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEiB;;;;;;;;;;;;;;;;;;;;AC5TgB;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV,YAAY;AACZ,OAAO;AACP,OAAO;AACP,OAAO;AACP,gBAAgB;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,kBAAkB;AAClB;AACA,QAAQ;AACR,uBAAuB,UAAU;AACjC;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR,UAAU;AACV,QAAQ;AACR,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,UAAU,GAAG,sBAAsB,MAAM,EAAE;AACpE;AACA;AACA;AACA;AACA,yBAAyB,UAAU,GAAG,sBAAsB,IAAI,IAAI;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU,GAAG,sBAAsB,IAAI,IAAI;AACtE;AACA,uBAAuB,UAAU,GAAG,sBAAsB,IAAI,IAAI;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU,GAAG,sBAAsB,IAAI,IAAI;AACtE;AACA,uBAAuB,UAAU,GAAG,sBAAsB,IAAI,IAAI;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU,GAAG,sBAAsB,IAAI,IAAI;AACtE;AACA,uBAAuB,UAAU,GAAG,sBAAsB,IAAI,IAAI;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU,GAAG,sBAAsB,IAAI,IAAI;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT,YAAY;AACZ,iBAAiB;AACjB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,mBAAmB,8CAAK;AACxB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,KAAK;AACL;AACA;AACA,0BAA0B;AAC1B,8BAA8B;AAC9B,2BAA2B;AAC3B,sCAAsC,iCAAiC,OAAO;AAC9E,+BAA+B;AAC/B,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,KAAK;AACL;AACA;AACA,0BAA0B;AAC1B,8BAA8B;AAC9B,2BAA2B;AAC3B,sCAAsC,iCAAiC,OAAO;AAC9E,+BAA+B;AAC/B,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,8BAA8B;AAC9B,2BAA2B;AAC3B,sCAAsC,iCAAiC,OAAO;AAC9E,+BAA+B;AAC/B,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,8BAA8B;AAC9B,2BAA2B;AAC3B,sCAAsC,iCAAiC,OAAO;AAC9E,+BAA+B;AAC/B,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,qCAAqC,kBAAkB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iCAAiC,OAAO;AAC7E,8BAA8B;AAC9B,2BAA2B;AAC3B,sCAAsC,iCAAiC,OAAO;AAC9E,0CAA0C,iCAAiC,OAAO;AAClF,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;AACA,qCAAqC,8BAA8B,OAAO;AAC1E,qDAAqD,OAAO;AAC5D,2BAA2B;AAC3B,sCAAsC,8BAA8B,OAAO;AAC3E,sDAAsD,OAAO;AAC7D,sCAAsC,8BAA8B,OAAO;AAC3E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qCAAqC,8BAA8B,OAAO;AAC1E,qDAAqD,OAAO;AAC5D,2BAA2B;AAC3B,sCAAsC,8BAA8B,OAAO;AAC3E,sDAAsD,OAAO;AAC7D,sCAAsC,8BAA8B,OAAO;AAC3E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,8BAA8B;AAC9B,2BAA2B;AAC3B,2BAA2B;AAC3B,qDAAqD,QAAQ;AAC7D,0CAA0C,OAAO;AACjD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,+BAA+B;AAC/B,2BAA2B;AAC3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,mBAAmB,UAAU,GAAG,sBAAsB;AACtD;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,mBAAmB,UAAU,GAAG,sBAAsB;AACtD;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,mBAAmB,UAAU,GAAG,sBAAsB;AACtD;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,mBAAmB,UAAU,GAAG,sBAAsB;AACtD;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,mBAAmB,UAAU,GAAG,sBAAsB;AACtD;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,mBAAmB,UAAU,GAAG,sBAAsB;AACtD;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,sBAAsB,oBAAoB;AAC1C,KAAK;AACL;AACA;;;AAGA;AACA;AACA;AAC4C;;;;;;;UC/+B5C;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACN8C;;AAEnB","sources":["webpack://SimplePS/webpack/universalModuleDefinition","webpack://SimplePS/./src/parser.js","webpack://SimplePS/./src/simple-ps.js","webpack://SimplePS/webpack/bootstrap","webpack://SimplePS/webpack/runtime/define property getters","webpack://SimplePS/webpack/runtime/hasOwnProperty shorthand","webpack://SimplePS/webpack/runtime/make namespace object","webpack://SimplePS/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimplePS\"] = factory();\n\telse\n\t\troot[\"SimplePS\"] = factory();\n})(self, () => {\nreturn ","/*\n * 文字列を受け取りRuleの配列を返すパーサであるrules()関数を提供。\n * もしエラーがあったらエラーメッセージの文字列を返す。\n */\nimport { Rule, Term, Var } from './simple-ps';\n\n// 識別子の最初の文字にマッチする正規表現\nconst rx_id1st = new RegExp('[a-zA-Z_\\u00c0-\\u1fff\\u3040-\\u318f\\u3400-\\u3d2d\\u4e00-\\u9fff\\uf900-\\ufaff]');\n// 識別子の2文字目以降の文字にマッチする正規表現\nconst rx_id2nd = new RegExp('[a-zA-Z_\\u00c0-\\u1fff\\u3040-\\u318f\\u3400-\\u3d2d\\u4e00-\\u9fff\\uf900-\\ufaff0-9]');\n// 数字と判定される文字にマッチする正規表現\nconst rx_num = new RegExp('[0-9]');\n\n// 再帰下降構文解析で解析する。方針としてグローバル変数の\n// inputStrに解析文字列を入れといて、基本1文字ずつ解析。\n// その文字の位置を常にグローバル変数のidx変数に保存。\n// 解析関数はinputStr.charAt(idx)から\n// 解析を始める。その時に必要であれば解析が失敗することを\n// 考慮してidxをidxBackupに保存しておく。もし、解析が成功\n// したらidxは次に解析される文字の所まで進めておく義務がある。\n// なおかつreturnで解析結果を返す。もし、解析が失敗したら\n// エラーメッセージをグローバル変数のerrorMessageに書き込み、\n// バックアップしていたidxBackupをidxに代入して戻しておく。\n// なおかつreturnでnullを返すことにする。\n\nlet inputStr; // 解析する文字列(普通は\\nが入った複数行の文字列)\nlet idx; // 現在解析しているinputStr中の一文字の場所\nlet errorMessage; // エラーメッセージを記録しておく場所\n\n// 現在解析している場所の行番号と列番号を文字列で返す関数。\n// エラーメッセージ作る時に使おう。\nfunction lineColumnNo() {\n  let line = 1;\n  let column = 1;\n  for (let i=0;i<idx;i++) {\n    if (inputStr.charAt(i)==='\\n') {\n      line++;\n      column = 1;\n    } else {\n      column++;\n    }\n  }\n  return \"\"+line+\":\"+column;\n}\n\n// 指定した1文字を検出する解析関数\nfunction char(c) {\n  if (inputStr.charAt(idx)===c) {\n    idx++;\n    return c;\n  }\n  errorMessage = `Error(${lineColumnNo()}) ここには文字「${c}」がこなければなりません。`;\n  return null;\n}\n\n// コメントは「/*」で始まり「*/」で終るコメントのみ許可\nfunction comment() {\n  const idxBackup = idx;\n  if (char('/')) {\n    if (char('*')) {\n      while (true) {\n\tconst idxBackup2 = idx;\n\tif (char('*')) {\n\t  if (char('/')) {\n\t    return \"comment\";\n\t  }\n\t}\n\tidx = idxBackup2;\n\tif (inputStr.charAt(idx)==='') {\n\t  idx = idxBackup;\n\t  errorMessage = `Error(${lineColumnNo()}) ここにはコメントがこなければなりません。`;\n\t  return null;\n\t}\n\tidx++;\n      }\n    }\n  }\n  idx = idxBackup;\n  errorMessage = `Error(${lineColumnNo()}) ここにはコメントがこなければなりません。`;\n  return null;\n}\n\n// 半角空白、タブ、改行の時成功。それ以外は失敗。\nfunction whiteChar() {\n  if (char(' ')) return ' ';\n  if (char('\\t')) return '\\t';\n  if (char('\\n')) return '\\n';\n  errorMessage = `Error(${lineColumnNo()})`;\n  return null;\n}\n\n// whiteSpaceまたは空文字列を検出。なので絶対成功する。\n// つまりスペースが入ってても良いし入ってなくても良い\n// ような場所で使う。あとコメント文もwhiteSpace扱いに\n// することにした。\nfunction whiteSpace() {\n  while (true) {\n    const cmt = comment();\n    if (cmt)\n      continue;\n    const w = whiteChar();\n    if (w == null)\n      return \"whiteSpace\";\n  }\n}\n\n// 関数名、変数名などの名前に相当する識別子を検出する\nfunction id() {\n  const idxBackup = idx;\n  let name = '';\n  let c = inputStr.charAt(idx);\n  if (!c.match(rx_id1st)) {\n    errorMessage = `Error(${lineColumnNo()}) ここには識別子がくるべきです。`;\n    return null;\n  }\n  name += c;\n  while (true) {\n    idx++;\n    c = inputStr.charAt(idx);\n    if (!c.match(rx_id2nd))\n      return name;\n    name += c;\n  }\n}\n\n// whiteSpaceを読み飛ばして入力文字列の終りを検出する\nfunction eof() {\n  const idxBackup = idx;\n  const w = whiteSpace(); // 絶対成功する\n  const c = inputStr.charAt(idx); // idxが範囲外の時は空文字列\n  if (c === '')\n    return \"EOF\";\n  // ここまで来たら何か文字が残ってるのでエラー\n  idx = idxBackup;\n  errorMessage = `Error(${lineColumnNo()}): EOF(入力の最後でなければなりません。`;\n  return null;\n}\n\n// 文字列を解析する。\n// まだ文字列中の引用符のエスケープとかには対応してない。\nfunction string() {\n  const idxBackup = idx;\n  let a = char('\"');\n  if (a==null)\n    a = char(\"'\");\n  if (a==null) {idx=idxBackup;return null;}\n  let s = '';\n  while (true) {\n    const c = inputStr.charAt(idx);\n    if (c === '') {\n      idx = idxBackup;\n      errorMessage = `Error(${lineColumnNo()}) 文字列解析中に入力が終了しました。`;\n      return null;\n    }\n    if (c === a) {\n      idx++;\n      break;\n    }\n    s += c;\n    idx++;\n  }\n  return s;\n}\n\n// 数字を解析する。\nfunction number() {\n  const idxBackup = idx;\n  let c = inputStr.charAt(idx);\n  if (c !== '.' && !c.match(rx_num)) {\n    errorMessage = `Error(${lineColumnNo()}) ここには数字がこなければなりません。`;\n    return null;\n  }\n  let num = '';\n  if (c === '.') { // '.'で始まる特殊な場合\n    idx++; c = inputStr.charAt(idx);\n    if (!c.match(rx_num)) {\n      idx = idxBackup;\n      return null;\n    }\n    idx = idxBackup;\n    c = inputStr.charAt(idx);\n  } else { // ここにくるのは整数部分\n    num += c;\n    idx++; c = inputStr.charAt(idx);\n    while (c.match(rx_num)) {\n      num += c;\n      idx++; c = inputStr.charAt(idx);\n    }\n  }\n  if (c === '.') { // 小数部分\n    num += c;\n    idx++; c = inputStr.charAt(idx);\n    while (c.match(rx_num)) {\n      num += c;\n      idx++; c = inputStr.charAt(idx);\n    }\n  }\n  if (c === 'e' || c === 'E') {\n    num += c;\n    idx++; c = inputStr.charAt(idx);\n    if (c === '+' || c === '-') {\n      num += c;\n      idx++; c = inputStr.charAt(idx);\n    }\n    while (c.match(rx_num)) {\n      num += c;\n      idx++; c = inputStr.charAt(idx);\n    }\n  }\n  return Number(num);\n}\n\n// 項(条件やビルトインなど)を解析。項は関数の形をしている。\nfunction term() {\n  const idxBackup = idx;\n  const name = id();\n  if (name == null) return null;\n    whiteSpace();\n  if (char('(') == null) {idx=idxBackup;return null};\n  const args = []; // 引数の配列\n  while (true) {\n    whiteSpace();\n    if (inputStr.charAt(idx) === ',')\n      idx++;\n    whiteSpace();\n    const v = id(); if (v) {args.push(new Var(v));continue;} // 変数\n    const n = number(); if (n) {args.push(n);continue;} // 数字\n    const s = string(); if (s) {args.push(s);continue;} // 文字列\n    break;\n  }\n  whiteSpace();\n  if (char(')') == null) {idx=idxBackup;return null};\n  whiteSpace();\n  if (inputStr.charAt(idx) === ',')\n    idx++;\n  return new Term(name,args);\n}\n\n// ルール1本分。Ruleのインスタンスを返す。エラーならエラーメッセージを返す。\nfunction rule() {\n  const idxBackup = idx;\n  whiteSpace();\n  const priority = number();\n  if (priority == null) { idx=idxBackup; return null; }\n  whiteSpace();\n  if (char(':') == null) { idx=idxBackup; return null; }\n  const lhs = [];\n  while (true) {\n    whiteSpace();\n    const cond = term(); // 1つの条件に該当\n    if (cond == null) break;\n    lhs.push(cond);\n  }\n  if (lhs.length === 0) {\n    errorMessage = `Error(${lineColumnNo()}) 条件部(LHS)がありません。`;\n    idx=idxBackup;\n    return null;\n  }\n  whiteSpace();\n  //if (char('-') == null) { idx=idxBackup; return null; } // やっぱり入れない\n  if (char('>') == null) { idx=idxBackup; return null; }\n  const rhs = [];\n  while (true) {\n    whiteSpace();\n    const com = term(); // 1つの実行命令に該当\n    if (com == null) break;\n    rhs.push(com);\n  }\n  if (rhs.length === 0) {\n    errorMessage = `Error(${lineColumnNo()}) 実行部(RHS)がありません。`;\n    idx=idxBackup;\n    return null;\n  }\n  whiteSpace();\n  if (char(';') == null) { idx=idxBackup; return null; }\n  return new Rule(priority,lhs,rhs);\n}\n\n// ルールの集合。ここが文法解析の出発点。\nfunction rules() {\n  const idxBackup = idx;\n  const rs = [];\n  while (true) {\n    const e = eof();\n    if (e)\n      break; // 正常終了\n    whiteSpace();\n    const r = rule();\n    if (r) {\n      rs.push(r);\n      continue;\n    }\n    // ここまで来たら何かエラー\n    idx = idxBackup;\n    // errorMessageはrule()の時のエラーを残す\n    return null;\n  }\n  return rs;\n}\n\n// 文法解析を実行する関数。\n// 解析するための文字列を引数で渡す。色々初期化してからスタート。\n// 解析が成功したらRuleの配列を返す。そして、解析失敗の\n// 時はエラーメッセージの文字列を返す。\n// 入力が空っぽの時も成功と見なして空の配列を返す。\nfunction parse(input) {\n  inputStr = input;\n  idx = 0;\n  errorMessage = \"\";\n\n  const rs = rules();\n  if (rs === null)\n    return errorMessage;\n  return rs;\n}\n\nexport { parse };\n","import { parse } from './parser';\n\n// 推論システム\n// 推論は常に完全に停止して終了するタイプではなく\n// ワーキングメモリの状況に変化があれば自動で\n// 推論を再開するようにする。\n// ただ、無駄にCPUを消費することが無いように、\n// 実行できるルールが無い時は自動でスリープ状態にする。\n// また、競合解消戦略はパート1とパート2に分けた。\n// パート2は簡単でルールに設定されたプライオリティが\n// 一番高いやつを選ぶだけ。パート1がむずかしくて、\n// 同じルールが無限に実行され続けるのを防ぐための物。\n// これの実装はRuleクラスのisNewSituation()メソッドに\n// 集約した。isNewSituation()はまだ理想的な状態ではない。\n// あと、OneTime推論モードというのが必要だった。普通は、\n// 1度ルールが実行された後も、他に実行できるルールがある\n// 時は、推論ループの中で実行されていく。でも推論を\n// 1ステップごとに実行したい時もあるので、それを実装する\n// ためにOneTime推論モードを導入する。これは推論エンジンの\n// そのためにinferStatusに\"oneTime\"という状態を導入する。\n\n//変数\nclass Var {\n  name;\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nclass Term {\n  name; // 関数名に相当する部分\n  args; // 引数部分\n  constructor(name,args) {\n    this.name = name;\n    this.args = args;\n  }\n  toString() {\n    let str = \"\";\n    str += this.name + \"(\"\n    this.args.forEach((arg)=>{\n      if (typeof arg === \"number\")\n        str += arg + \" \";\n      else if (typeof arg === \"string\")\n        str += '\"' + arg + '\" ';\n      else if (arg.constructor.name === \"Var\")\n        str += arg.name + \" \";\n      else\n        str += \"??? \";\n    });\n    str += \")\"\n    return str;\n  }\n}\n\nclass Rule {\n  engine; // このルールを読み込んだEngine。後でengine自身ががセット\n  priority; // 優先度\n  lhs; // 条件部(Left Hand Side)(Termの配列)\n  rhs; // 実行部(Right Hand Side)(Termの配列)\n  env; // 変数のバインディングを保持する環境\n  lastExecTime; // このルールが最後に実行された時間\n\n  constructor(priority,lhs,rhs) {\n    this.priority = priority;\n    this.lhs = lhs;\n    this.rhs = rhs;\n    this.lastExecTime = -1;\n  }\n  toString() {\n    let str = \"\";\n    str += this.priority + \": \";\n    this.lhs.forEach((c)=>{\n      str += c.toString() + \" \";\n    });\n    str += \"> \";\n    this.rhs.forEach((a)=>{\n      str += a.toString() + \" \";\n    });\n    str += \";\";\n    return str;\n  }\n\n  // このルールの適用条件が満されているかチェック。\n  checkConditions() {\n    this.env = {};\n    for (let i=0;i<this.lhs.length;i++) {\n      const term = this.lhs[i];\n      const builtIn = this.engine.builtIns[term.name];\n      if (builtIn) {\n        try {\n          if (!builtIn.preEval(term.args,this.env))\n            return false;\n        } catch(e) {\n          console.log(e);\n          return false;\n        }\n      } else {\n        console.log(`${term.name}という名前のビルトインが見付かりません。`)\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // 競合解消\n  // このルールの条件部を判定する作業が副作用\n  // (例えば変数へのバインドなど)も含め、前回の実行時と\n  // まったく同じであれば「真」そうでなければ「偽」を返す・・・\n  // のが理想だけど、とりあえず条件部で参照されるWMの\n  // 項目が以前の実行時から更新されている物が1つでもあれば\n  // 「真」そうでなければ「偽」としている。ほぼ良いと\n  // 思うが、no(NoBI)ビルトインだけ特殊で、これは間にあわせ\n  // の対応。\n  isNewSituation() {\n    let isNew = false;\n    ext1: for (let i=0;i<this.lhs.length;i++) {\n      const term = this.lhs[i];\n      for (let j=0;j<term.args.length;j++) {\n        const arg = term.args[j];\n        if (arg.constructor.name === \"Var\") {\n          const updateTime =this.engine.getInfoUpdateTime(arg.name);\n          if (updateTime > this.lastExecTime) {\n            isNew = true;\n            break ext1;\n          } else if (term.name === \"no\" && updateTime===undefined) {\n            isNew = true;\n            break ext1;\n          }\n        }\n      }\n    }\n    return isNew;\n  }\n\n  // このルールの実行部を実行\n  doActions() {\n    this.lastExecTime = this.engine.workingMemoryTime;\n    this.rhs.forEach((term)=>{\n      const builtIn = this.engine.builtIns[term.name];\n      if (builtIn) {\n        try {\n          builtIn.preEval(term.args,this.env);\n        } catch(e) {\n          console.log(e);\n          return; // 途中終了？\n        }\n      } else {\n        console.log(`${term.name}という名前のビルトインが見付かりません。`);\n      }\n    });\n  }\n}\n\n// 処理は全てビルトインとして実装\n// このBuiltInはそれらのスーパークラス\nclass BuiltIn {\n  name; // 名前\n  engine; // 推論エンジン(後で代入される)\n  args; // 引数の配列(Termの配列)\n  env; // ルールから受け取った変数の環境(変数名と値のMap)\n  constructor(name) {\n    this.name = name;\n  }\n  preEval(args,env) {\n    this.args = args;\n    this.env = env;\n    return this.eval();\n  }\n  eval() {\n    // このBuiltInに必要な処理を行う。BuiltInには引数、\n    // 変数、ワーキングメモリにアクセスするための各種\n    // メソッドがあるので、これを使って必要な処理をする。\n    // このBuiltInを条件部で使うならばtrueかfalseを\n    // returnすること。処理によっては例外をthrowする\n    // ことができるものとする。\n  }\n  // 引数の数を返す\n  getArgsNum() {\n    return this.args.length;\n  }\n  // 引数の数をチェックしてダメな時は例外を発生\n  checkArgsNum(n) {\n    if (this.args.length != n)\n      throw new Error(`${this.name}(${this.constructor.name}) 必ず${n}の引数を指定して下さい。`);\n  }\n  // 引数のn番目の変数の名前を取り出す。変数でなければ例外を発生。\n  getArgAsName(n) {\n    if (this.args[n].constructor.name != \"Var\")\n      throw new Error(`${this.name}(${this.constructor.name}) ${n+1}番目の引数は変数でなければなりません。`);\n    return this.args[n].name;\n  }\n  // 引数のn番目を数字として取り出す。数字でない時は例外を発生。\n  // 変数の時はその中もチェックして判断。\n  getArgAsNum(n) {\n    if (typeof this.args[n] === \"number\")\n      return this.args[n];\n    else if (this.args[n].constructor.name == \"Var\") {\n      const v = this.env[this.args[n].name];\n      if (typeof v === \"number\")\n        return v;\n      else (typeof v === undefined || typeof v === null)\n        throw new Error(`${this.name}(${this.constructor.name}) ${n+1}番目の引数の変数は空でした。`);\n    }\n    throw new Error(`${this.name}(${this.constructor.name}) ${n+1}番目の引数は数値でなければなりません。`);\n  }\n  // 引数のn番目を文字列として取り出す。文字列でない時は例外を発生。\n  // 変数の時はその中もチェックして判断。\n  getArgAsStr(n) {\n    if (typeof this.args[n] === \"string\")\n      return this.args[n];\n    else if (this.args[n].constructor.name == \"Var\") {\n      const v = this.env[this.args[n].name];\n      if (typeof v === \"string\")\n        return v;\n      else (typeof v === undefined || typeof v === null)\n        throw new Error(`${this.name}(${this.constructor.name}) ${n+1}番目の引数の変数は空でした。`);\n    }\n    throw new Error(`${this.name}(${this.constructor.name}) ${n+1}番目の引数は文字列でなければなりません。`);\n  }\n  // 引数のn番目の値を取り出す。もし空の時は例外を発生。\n  // 変数の時はその中もチェックして判断。\n  getArgIfNotEmpty(n) {\n    if (typeof this.args[n] === \"number\")\n      return this.args[n];\n    else if (typeof this.args[n] === \"string\") {\n      return this.args[n];\n    } else if (this.args[n].constructor.name == \"Var\") {\n      const v = this.env[this.args[n].name];\n      if (typeof v === \"number\")\n        return v;\n      else if (typeof v === \"string\")\n        return v;\n      else (typeof v === undefined || typeof v === null)\n        throw new Error(`${this.name}(${this.constructor.name}) ${n+1}番目の引数の変数は空でした。`);\n    }\n    throw new Error(`${this.name}(${this.constructor.name}) ${n+1}番目の引数は不明な値です。`);\n  }\n  // n番目の引数から値を取り出す。変数の時はそれも展開する。\n  // getArgIfNotEmptyと異なりデータが空の時はnullを返す。\n  getArg(n) {\n    if (typeof this.args[n] === \"number\")\n      return this.args[n];\n    else if (typeof this.args[n] === \"string\")\n      return this.args[n];\n    else if (this.args[n].constructor.name === \"Var\") {\n      const v = this.env[this.args[n].name];\n      return v;\n    }\n    throw new Error(`${this.name}(${this.constructor.name}) ${n+1}番目の引数の変数は空でした。`);\n  }\n  // 変数に値を代入する\n  setVar(name,value) {\n    this.env[name] = value;\n  }\n  // 変数から値を取り出す\n  getVar(name) {\n    return this.env[name];\n  }\n  // keyとvalueのセットを受けとりワーキングメモリに情報を追加または上書き\n  addInfoToWM(keyValue) {\n    this.engine.addInfoToWM(keyValue);\n  }\n  // infoNameとvalueを受けとりワーキングメモリに情報を追加または上書き\n  addOneInfoToWM(infoName,value) {\n    this.engine.addOneInfoToWM(infoName,value);\n  }\n  // ワーキングメモリから情報を取り出す\n  getInfoFromWM(infoName) {\n    return this.engine.getInfoFromWM(infoName);\n  }\n  // ワーキングメモリから情報を削除\n  delInfoFromWM(infoName) {\n    this.engine.delInfoFromWM(infoName);\n  }\n  // ワーキングメモリを空にする\n  clearWM() {\n    this.engine.clearWM();\n  }\n}\n\n// 推論エンジン本体。中にルールなど全部入っている。\nclass Engine {\n  rules; // ルールの配列\n  builtIns; // ビルトインのMap\n  workingMemory; // ワーキングメモリのMap\n  workingMemoryTime; // ワーキングメモリの更新時刻\n  // 推論の実行状態(inferStatus)\n  // \"stoped\": 停止中(wmに変化があっても走り出さない)\n  // \"waitForRun\": 次の実行を待機中\n  // \"running\": まさに実行中\n  // \"standby\": 実行中ではあるが今やることがないので待機中\n  // \"waitForStop\": 停止要求は出されてるけどまだ実行中の場合\n  // \"oneTime\": oneTime推論モード。この状態の時には状態は変化させない。\n  inferStatus;\n  timeoutID; // setTimeoutを止めるために記録(整数)\n\n  constructor(ruleStr) {\n    if (ruleStr === undefined)\n      this.rules = [];\n    else\n      this.rules = parse(ruleStr);\n    this.rules.forEach((rule)=>{\n      rule.engine = this;\n    });\n    this.builtIns = {};\n    this.workingMemory = {};\n    this.workingMemoryTime = 0;\n    this.inferStatus = \"stoped\";\n    this.timeoutID = 0;\n\n    this.addBuiltIn(new SearchBI());\n    this.addBuiltIn(new NoBI());\n    this.addBuiltIn(new GtBI());\n    this.addBuiltIn(new LtBI());\n    this.addBuiltIn(new GeBI());\n    this.addBuiltIn(new LeBI());\n    this.addBuiltIn(new EqBI());\n    this.addBuiltIn(new NeqBI());\n    this.addBuiltIn(new RangeBI());\n    this.addBuiltIn(new Range2BI());\n    this.addBuiltIn(new SeqBI());\n    this.addBuiltIn(new SgtBI());\n    this.addBuiltIn(new SltBI());\n    this.addBuiltIn(new SgeBI());\n    this.addBuiltIn(new SleBI());\n    this.addBuiltIn(new SetBI());\n    this.addBuiltIn(new StoreBI());\n    this.addBuiltIn(new Store2BI());\n    this.addBuiltIn(new DelBI());\n    this.addBuiltIn(new AddBI());\n    this.addBuiltIn(new SubBI());\n    this.addBuiltIn(new MulBI());\n    this.addBuiltIn(new DivBI());\n    this.addBuiltIn(new ConcatBI());\n    this.addBuiltIn(new LogBI());\n    this.addBuiltIn(new RandBI());\n    this.addBuiltIn(new ModBI());\n    this.addBuiltIn(new FloorBI());\n    this.addBuiltIn(new SneqBI());\n    this.addBuiltIn(new StopBI());\n    this.addBuiltIn(new WmBI());\n    this.resultBI = new ResultBI();\n    this.addBuiltIn(this.resultBI);\n  }\n\n  // ビルトインを追加\n  addBuiltIn(builtIn) {\n    builtIn.engine = this;\n    this.builtIns[builtIn.name] = builtIn;\n  }\n\n  // keyとvalueのセットを受けとりワーキングメモリに情報を追加または上書き\n  addInfoToWM(keyValue) {\n    this.workingMemoryTime++;\n    Object.keys(keyValue).forEach((infoName)=>{\n      const value = keyValue[infoName];\n      if (value === undefined) value = null;\n      this.workingMemory[infoName] = {updateTime:this.workingMemoryTime,value};\n    });\n    \n    switch(this.inferStatus) {\n    case \"stoped\": break; // 何もしなくてOK\n    case \"waitForRun\": break; // 何もしなくて良いはず\n    case \"running\": break; // ありえないはず\n    case \"standby\": this.justStart(); this.inferStatus = \"waitForRun\"; break; // 起動\n    case \"waitForStop\": break; // 何もしなくて良いはず\n    case \"oneTime\": break; // 何もしなくて良いはず\n    }\n  }\n\n  // infoNameとvalueを受けとりワーキングメモリに情報を追加または上書き\n  addOneInfoToWM(infoName,value) {\n    if (value === undefined)\n      value = null; // 基本undefinedは入れないようにする\n    const kv = {};\n    kv[infoName] = value;\n    this.addInfoToWM(kv);\n  }\n\n  // まずワーキングメモリを空にしてから、keyとvalueの\n  // セットを受けとりワーキングメモリに情報をセット\n  setInfoToWM(keyValue) {\n    this.workingMemoryTime++;\n    this.workingMemory = {};\n    Object.keys(keyValue).forEach((infoName)=>{\n      const value = keyValue[infoName];\n      if (value === undefined) value = null;\n      this.workingMemory[infoName] = {updateTime:this.workingMemoryTime,value};\n    });\n    \n    switch(this.inferStatus) {\n    case \"stoped\": break; // 何もしなくてOK\n    case \"waitForRun\": break; // 何もしなくて良いはず\n    case \"running\": break; // ありえないはず\n    case \"standby\": this.justStart(); this.inferStatus = \"waitForRun\"; break; // 起動\n    case \"waitForStop\": break; // 何もしなくて良いはず\n    case \"oneTime\": break; // 何もしなくて良いはず\n    }\n  }\n\n  // ワーキングメモリから情報を取り出す\n  getInfoFromWM(infoName) {\n    const info = this.workingMemory[infoName];\n    if (!info) return undefined;\n    return info.value;\n  }\n\n  // ワーキングメモリから情報を消去\n  delInfoFromWM(infoName) {\n    this.workingMemoryTime++;\n    delete this.workingMemory[infoName];\n    switch(this.inferStatus) {\n    case \"stoped\": break; // 何もしなくてOK\n    case \"waitForRun\": break; // 何もしなくて良いはず\n    case \"running\": break; // ありえないはず\n    case \"standby\": this.justStart(); this.inferStatus = \"waitForRun\"; break; // 起動\n    case \"waitForStop\": break; // 何もしなくて良いはず\n    case \"oneTime\": break; // 何もしなくて良いはず\n    }\n  }\n\n  // ワーキングメモリを空にする\n  clearWM(infoName) {\n    this.workingMemoryTime++;\n    this.workingMemory = {};\n    switch(this.inferStatus) {\n    case \"stoped\": break; // 何もしなくてOK\n    case \"waitForRun\": break; // 何もしなくて良いはず\n    case \"running\": break; // ありえないはず\n    case \"standby\": this.justStart(); this.inferStatus = \"waitForRun\"; break; // 起動\n    case \"waitForStop\": break; // 何もしなくて良いはず\n    case \"oneTime\": break; // 何もしなくて良いはず\n    }\n  }\n\n  // ワーキングメモリから情報の更新時間を取り出す\n  getInfoUpdateTime(infoName) {\n    const info = this.workingMemory[infoName];\n    if (!info) return undefined;\n    return info.updateTime;\n  }\n\n  // ワーキングメモリの内容を文字列でダンプ\n  dumpWM() {\n    let str = \"[WM update=\"+this.workingMemoryTime+\"]\";\n    Object.keys(this.workingMemory).forEach((key)=>{\n      str += key + \":\";\n      str += this.workingMemory[key].value + \"(\";\n      str += this.workingMemory[key].updateTime + \") \";\n    });\n    return str;\n  }\n\n  // 推論をスタート(内部使用。単純に推論をスタートさせる)\n  justStart() {\n//console.trace(\"GAHA\");\n    this.timeoutID = setTimeout(()=>{this.inferLoop();},0);\n    this.inferStatus = \"waitForRun\";\n  }\n  \n  // 推論をスタート(外部からの呼び出し用)\n  start() {\n    switch(this.inferStatus) {\n    case \"stoped\": this.justStart(); this.inferStatus = \"waitForRun\"; break; // 起動\n    case \"waitForRun\": break; // 何もしなくて良いはず\n    case \"running\": break; // ありえないはず\n    case \"standby\": this.justStart(); this.inferStatus = \"waitForRun\"; break; // 起動\n    case \"waitForStop\": this.justStart(); this.inferStatus = \"waitForRun\"; break; // 起動\n    case \"oneTime\": break; // 何もしないということにする\n    }\n  }\n\n  // 推論[照合、競合解消、実行]の1ステップだけ実行\n  inferOneStep() {\n    switch(this.inferStatus) {\n    case \"stoped\": this.justStart(); this.inferStatus = \"oneTime\"; break; // 実行\n    case \"waitForRun\": this.inferStatus = \"oneTime\"; break; // 実行\n    case \"running\": break; // ありえないはず\n    case \"standby\": this.justStart(); this.inferStatus = \"oneTime\"; break; // 実行\n    case \"waitForStop\": this.inferStatus = \"oneTime\"; break; // 実行\n    case \"oneTime\": this.justStart(); this.inferStatus = \"oneTime\"; break; // 実行\n    }\n  }\n\n  // 推論[照合、競合解消、実行]の1ステップだけ実行して\n  // result(ResultBI)による結果が出るまで待って、結果を返す。\n  // 推論結果を待つ時間(ミリ秒)をtimeout引数で指定できる。\n  async inferOneStepAndWait(timeout) {\n    switch(this.inferStatus) {\n    case \"stoped\": this.justStart(); this.inferStatus = \"oneTime\"; break; // 実行\n    case \"waitForRun\": this.inferStatus = \"oneTime\"; break; // 実行\n    case \"running\": break; // ありえないはず\n    case \"standby\": this.justStart(); this.inferStatus = \"oneTime\"; break; // 実行\n    case \"waitForStop\": this.inferStatus = \"oneTime\"; break; // 実行\n    case \"oneTime\": this.justStart(); this.inferStatus = \"oneTime\"; break; // 実行\n    }\n    return await this.resultBI.getResult(timeout);\n  }\n\n  // 推論のループ制御。\n  inferLoop() {\n//console.log(\"GAHA0:Engine.inferLoop() ******************************\");\n//console.log(\"GAHA1:\",this.dumpWM());\n//console.log(\"GAHA2:inferStatus=\",this.inferStatus);\n    let isOneTimeMode = false;\n    switch(this.inferStatus) {\n    case \"stoped\": return; // ありえない\n    case \"waitForRun\": break; // 普通。Go ahead!\n    case \"running\": break; // ありえないはず\n    case \"standby\": break; // ありえないはず\n    case \"waitForStop\": this.inferStatus = \"stoped\"; return; // 止める\n    case \"oneTime\": isOneTimeMode = true; break; // モード指定でGo!\n    }\n    this.inferStatus = \"running\";\n\n    // 照合\n    let conflictSet = [];\n    this.rules.forEach((rule)=>{\n      if (rule.checkConditions(this.workingMemory))\n        conflictSet.push(rule);\n    });\n//console.log(\"GAHA3:conflictSet=\",conflictSet);\n\n    // 競合解消1\n    // 照合ステップにおいてルールの条件部(LHS)が前回の実行時\n    const tmpSet = [];\n    conflictSet.forEach((rule)=>{\n      if (rule.isNewSituation())\n        tmpSet.push(rule);\n    });\n    conflictSet = tmpSet;\n//console.log(\"GAHA4:conflictSet=\",conflictSet);\n\n    // 競合解消2\n    // priorityが一番高い物を抽出\n    let maxPriority = -1;\n    let targetRule = null;\n    conflictSet.forEach((rule)=>{\n      if (maxPriority<rule.priority) {\n        targetRule = rule;\n        maxPriority = rule.priority;\n      }\n    });\n//console.log(\"GAHA5:maxPriority=\",maxPriority);\n//console.log(\"GAHA6:targetRule=\",(targetRule?targetRule.toString():null));\n//console.log(\"GAHA7:\",this.dumpWM());\n    // 実行部\n    // JavaScriptはシングルスレッドで\n    // このメソッド中にはawaitとかは含まないので\n    // このメソッドの実行中にthis.inferStatusが\n    // かわることはないとはずなのでまよわず以下。\n    if (targetRule !== null) {\n      targetRule.doActions();\n      if (isOneTimeMode===true) {\n        this.inferStatus = \"oneTime\";\n      } else {\n        this.justStart();\n        this.inferStatus = \"waitForRun\";\n      }\n    } else {\n      this.inferStatus = \"standby\";\n    }\n  }\n\n  // 推論を停止させます\n  stop() {\n    // シングルレッドだし、もしそうでなくても\n    // たぶんclearTimeout()しても実行中だったら\n    // それは止まらないという過程で書く。\n    switch(this.inferStatus) {\n    case \"stoped\": break; // 何もしなくてOK\n    case \"waitForRun\": // 止める\n      clearTimeout(this.timeoutID);\n      this.inferStatus = \"stoped\";\n      break;\n    case \"running\": break; // ありえないはず\n    case \"standby\": // clearTimeout()いらないはず\n      this.inferStatus = \"stoped\";\n      break;\n    case \"waitForStop\": break; // 何もしなくて良いはず\n    case \"oneTime\": break; // 何もしなくて良いはず\n    }\n  }\n}\n\n/************************\n * 以下ビルトインの実装 *\n ************************/\n\n// ワーキングメモリを探索するして情報があれば変数にセットするビルトイン\nclass SearchBI extends BuiltIn {\n  constructor() {super(\"s\");}\n  eval() {\n    this.checkArgsNum(1);\n    const name = this.getArgAsName(0);\n    const v = this.getInfoFromWM(name);\n    if (v === undefined)\n      return false;\n    this.setVar(name,v);\n    return true;\n  }\n}\n\n// 第一引数で指定した情報がワーキングメモリに\n// 無い場合にtrue．そうでない場合にfalseを返す．\nclass NoBI extends BuiltIn {\n  constructor() {super(\"no\");}\n  eval() {\n    this.checkArgsNum(1);\n    const name = this.getArgAsName(0);\n    const v = this.getInfoFromWM(name);\n    if (v === undefined)\n      return true;\n    else\n      return false;\n  }\n}\n\n// より大きい(>)の条件判断関数\nclass GtBI extends BuiltIn {\n  constructor() {super(\"gt\");}\n  eval() {\n    this.checkArgsNum(2);\n    const o1 = this.getArgAsNum(0);\n    const o2 = this.getArgAsNum(1);\n    if (o1>o2)\n      return true;\n    else\n      return false\n  }\n}\n\n// より小さい(<)の条件判断関数\nclass LtBI extends BuiltIn {\n  constructor() {super(\"lt\");}\n  eval() {\n    this.checkArgsNum(2);\n    const o1 = this.getArgAsNum(0);\n    const o2 = this.getArgAsNum(1);\n    if (o1<o2)\n      return true;\n    else\n      return false\n  }\n}\n\n// 以上(>=)の条件判断関数\nclass GeBI extends BuiltIn {\n  constructor() {super(\"ge\");}\n  eval() {\n    this.checkArgsNum(2);\n    const o1 = this.getArgAsNum(0);\n    const o2 = this.getArgAsNum(1);\n    if (o1>=o2)\n      return true;\n    else\n      return false\n  }\n}\n\n// 以下(<=)の条件判断関数\nclass LeBI extends BuiltIn {\n  constructor() {super(\"le\");}\n  eval() {\n    this.checkArgsNum(2);\n    const o1 = this.getArgAsNum(0);\n    const o2 = this.getArgAsNum(1);\n    if (o1<=o2)\n      return true;\n    else\n      return false\n  }\n}\n\n// 等しいかどうかの条件判断関数\nclass EqBI extends BuiltIn {\n  constructor() {super(\"eq\");}\n  eval() {\n    this.checkArgsNum(2);\n    const o1 = this.getArgIfNotEmpty(0);\n    const o2 = this.getArgIfNotEmpty(1);\n    if (o1===o2)\n      return true;\n    else\n      return false\n  }\n}\n\n// 等しくないかどうかの条件判断関数\nclass NeqBI extends BuiltIn {\n  constructor() {super(\"neq\");}\n  eval() {\n    this.checkArgsNum(2);\n    const o1 = this.getArgIfNotEmpty(0);\n    const o2 = this.getArgIfNotEmpty(1);\n    if (o1!==o2)\n      return true;\n    else\n      return false\n  }\n}\n\n// 数値が，ある範囲におさまっているかどうかの件判断関数(>=,<=)\nclass RangeBI extends BuiltIn {\n  constructor() {super(\"range\");}\n  eval() {\n    this.checkArgsNum(3);\n    const o1 = this.getArgAsNum(0);\n    const o2 = this.getArgAsNum(1);\n    const o3 = this.getArgAsNum(2);\n    if (o2>o3)\n      throw new Error(\"range(RangeBI) (第2引数 <= 第3引数) でなければなりません。\");\n    if (o2>=o1)\n      return false;\n    if (d2<=d3)\n      return false;\n    return true;\n  }\n}\n\n// 数値が，ある範囲におさまっているかどうかの件判断関数(>,<)\nclass Range2BI extends BuiltIn {\n  constructor() {super(\"range2\");}\n  eval() {\n    this.checkArgsNum(3);\n    const o1 = this.getArgAsNum(0);\n    const o2 = this.getArgAsNum(1);\n    const o3 = this.getArgAsNum(2);\n    if (o2>=o3)\n      throw new Error(\"range(RangeBI) 第2引数 < 第3引数 でなければなりません。\");\n    if (o2>o1)\n      return false;\n    if (d2<d3)\n      return false;\n    return true;\n  }\n}\n\n// SeqBI = SearchBI + EqBI\nclass SeqBI extends BuiltIn {\n  constructor() {super(\"seq\");}\n  eval() {\n    this.checkArgsNum(2);\n    const name = this.getArgAsName(0);\n    const v1 = this.getInfoFromWM(name);\n    if (v1 === undefined)\n      return false;\n    this.setVar(name,v1);\n    const v2 = this.getArg(1);\n    if (v1 === v2)\n      return true;\n    else\n      return false;\n  }\n}\n\n// SgtBI = SearchBI + GtBI\nclass SgtBI extends BuiltIn {\n  constructor() {super(\"sgt\");}\n  eval() {\n    console.log(`${this.name}(${this.constructor.name}) is not implemented yet!`);\n  }\n}\n\n// SltBI = SearchBI + LtBI\nclass SltBI extends BuiltIn {\n  constructor() {super(\"slt\");}\n  eval() {\n    console.log(`${this.name}(${this.constructor.name}) is not implemented yet!`);\n  }\n}\n\n// SgeBI = SearchBI + GeBI\nclass SgeBI extends BuiltIn {\n  constructor() {super(\"sge\");}\n  eval() {\n    console.log(`${this.name}(${this.constructor.name}) is not implemented yet!`);\n  }\n}\n\n// SleBI = SearchBI + LeBI\nclass SleBI extends BuiltIn {\n  constructor() {super(\"sle\");}\n  eval() {\n    console.log(`${this.name}(${this.constructor.name}) is not implemented yet!`);\n  }\n}\n\n// 変数に値を代入するための関数\nclass SetBI extends BuiltIn {\n  constructor() {super(\"set\");}\n  eval() {\n    console.log(`${this.name}(${this.constructor.name}) is not implemented yet!`);\n  }\n}\n\n// ワーキングメモリに情報をセットする関数\n// 1つの変数を引数に取り、その変数の名前と値でセット\nclass StoreBI extends BuiltIn {\n  constructor() {super(\"st\");}\n  eval() {\n    this.checkArgsNum(1);\n    const name = this.getArgAsName(0);\n    const v = this.getVar(name);\n    this.addOneInfoToWM(name,v);\n    return true;\n  }\n}\n\n// ワーキングメモリに情報をセットする関数\n// 2つの引数に取り、1つ目の名前で2つ目の値をセット\nclass Store2BI extends BuiltIn {\n  constructor() {super(\"st2\");}\n  eval() {\n    this.checkArgsNum(2);\n    const name = this.getArgAsName(0);\n    const value = this.getArg(1);\n    this.addOneInfoToWM(name,value);\n  }\n}\n\n// ワーキングメモリから情報を消す関数\nclass DelBI extends BuiltIn {\n  constructor() {super(\"del\");}\n  eval() {\n    this.checkArgsNum(1);\n    const name = this.getArgAsName(0);\n    this.delInfoFromWM(name);\n  }\n}\n\n// 足し算を行う関数\nclass AddBI extends BuiltIn {\n  constructor() {super(\"add\");}\n  eval() {\n    this.checkArgsNum(3);\n    const o1 = this.getArgAsNum(0);\n    const o2 = this.getArgAsNum(1);\n    const name = this.getArgAsName(2);\n    this.setVar(name,o1 + o2);\n  }\n}\n\n// 引き算を行う関数\nclass SubBI extends BuiltIn {\n  constructor() {super(\"sub\");}\n  eval() {\n    this.checkArgsNum(3);\n    const o1 = this.getArgAsNum(0);\n    const o2 = this.getArgAsNum(1);\n    const name = this.getArgAsName(2);\n    this.setVar(name,o1 - o2);\n  }\n}\n\n// かけ算を行う関数\nclass MulBI extends BuiltIn {\n  constructor() {super(\"mul\");}\n  eval() {\n    this.checkArgsNum(3);\n    const o1 = this.getArgAsNum(0);\n    const o2 = this.getArgAsNum(1);\n    const name = this.getArgAsName(2);\n    this.setVar(name,o1 * o2);\n  }\n}\n\n// 割り算を行う関数\nclass DivBI extends BuiltIn {\n  constructor() {super(\"div\");}\n  eval() {\n    this.checkArgsNum(3);\n    const o1 = this.getArgAsNum(0);\n    const o2 = this.getArgAsNum(1);\n    const name = this.getArgAsName(2);\n    if (o2 === 0)\n      throw new Error(\"div(DivBI) 割る数が0です。\");\n    this.setVar(name,o1 / o2);\n  }\n}\n\n// 文字列の結合を行う関数\nclass ConcatBI extends BuiltIn {\n  constructor() {super(\"concat\");}\n  eval() {\n    this.checkArgsNum(3);\n    const o1 = this.getArgAsStr(0);\n    const o2 = this.getArgAsStr(1);\n    const name = this.getArgAsName(2);\n    this.setVar(name,o1 + o2);\n  }\n}\n\n// 文字列を標準出力に表示する関数\nclass LogBI extends BuiltIn {\n  constructor() {super(\"log\");}\n  eval() {\n    let str = '';\n    const n = this.getArgsNum();\n    for (let i=0;i<n;i++) {\n      const v = this.getArg(i);\n      str += v;\n    }\n    console.log(str);\n  }\n}\n\n// [0.0-1.0)の乱数を生成する関数\nclass RandBI extends BuiltIn {\n  constructor() {super(\"rand\");}\n  eval() {\n    this.checkArgsNum(1);\n    const name = this.getArgAsName(0);\n    this.setVar(name,Math.random());\n  }\n}\n\n// あまりの計算(mod)\nclass ModBI extends BuiltIn {\n  constructor() {super(\"mod\");}\n  eval() {\n    this.checkArgsNum(3);\n    const o1 = this.getArgAsNum(0);\n    const o2 = this.getArgAsNum(1);\n    const name = this.getArgAsName(2);\n    if (o2 === 0)\n      throw new Error(\"mod(ModBI) 割る数が0です。\");\n    const div = o1 / o2;\n    const divf = Math.floor(div);\n    const mod = o1 - o2*divf;\n    this.setVar(name,mod);\n  }\n}\n\n// 床関数(またはガウス記号．つまり小数切り捨て)\nclass FloorBI extends BuiltIn {\n  constructor() {super(\"floor\");}\n  eval() {\n    this.checkArgsNum(2);\n    const o1 = this.getArgAsNum(0);\n    const name = this.getArgAsName(1);\n    this.setVar(name,Math.floor(o1));\n  }\n}\n\n// SneqFunc = SearchFunc + NeqFunc\n// sneqはseqのまったく反対ではなくあくまでSearchFunc + NeqFuncなので\n// 1つ目の引数がWMになければfalseになる点注意\n// まだDoubleとStringの場合にしか対応していない\nclass SneqBI extends BuiltIn {\n  constructor() {super(\"sneq\");}\n  eval() {\n    console.log(`${this.name}(${this.constructor.name}) is not implemented yet!`);\n  }\n}\n\n// プロダクションシステムのループ処理を強制終了させる\nclass StopBI extends BuiltIn {\n  constructor() {super(\"stop\");}\n  eval() {\n    this.engine.stop();\n    console.log(\"stop(StopBI) 推論エンジンを停止させます。\");\n  }\n}\n\n// ワーキングメモリの内容をコンソールにダンプする\nclass WmBI extends BuiltIn {\n  constructor() {super(\"wm\");}\n  eval() {\n    const wm = this.engine.dumpWM();\n    console.log(wm);\n  }\n}\n\n// 主にOneTimeモードの時に推論結果を保存して\n// おくためのビルトイン。引数は1つに限定。\nclass ResultBI extends BuiltIn {\n  reservedResult = null;\n  resolvePromiseFunc = null;\n  constructor() {super(\"result\");}\n  eval() {\n    this.checkArgsNum(1);\n    const res = this.getArg(0);\n    if (this.resolvePromiseFunc) {\n      this.resolvePromiseFunc(res);\n      this.resolvePromiseFunc = null;\n    } else {\n      this.reservedResult = res;\n    }\n  }\n  async getResult(timeout) {\n    return new Promise((resolve,reject) => {\n      if (this.reservedResult) {\n        resolve(this.reservedResult);\n        this.reservedResult = null;\n      } else {\n        this.resolvePromiseFunc = resolve;\n      }\n      setTimeout(()=>{resolve(\"Timeout!\")},timeout);\n    });\n  }\n}\n\n\n// このモジュールからExportするのは以下。ただ\n// simple-psパッケージからExportするのはEngine\n// とBuiltInだけで良いかも。\nexport { Engine, Rule, Term, Var, BuiltIn };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Engine, BuiltIn } from \"./simple-ps\";\n\nexport { Engine, BuiltIn };\n"],"names":[],"sourceRoot":""}